<template>
  <view class="container">
    <f2canvas
    class="lsiten-echart"
    style="width: {{size.width}}; height: {{size.height}};"
    id="{{ canvasId }}"
    canvas-id="{{ canvasId }}"
    opts="{{ opts }}"></f2canvas>
  </view>
</template>

<script>
import getData from '../../units/echart-f2/chartData.js'
import F2 from './f2-canvas/lib/f2';
import cml from 'chameleon-api'
let chart = null
class ChartF2 implements ChartF2Interface {
  props = {
    name: {
      type: String,
      default: 'lsiten_echart_' + ('' + Math.random()).replace('.', '_')
    },
    size: {
      type: Object,
      default: () => {return {width: '100%', height: '400px'}}
    },
    canvasId: {
      type: String,
      default: 'lsiten_echart_' + ('' + Math.random()).replace('.', '_')
    },
    chartDataId: {
      type: String,
      default: 'params1'
    }
  }

  data = {
    opts: {
      lazyLoad: true
    }
  }
  computed = {
  }

  watch = {
  }

  methods = {
    initChart () {
      this.selectComponent('#' + this.canvasId).init((canvas, width, height) => {
        this.initChartData(canvas, width, height)
      })
    },
    initChartData (canvas, width, height) {
      chart = chart ? chart : new F2.Chart({
                                            el: canvas,
                                            width,
                                            height
                                          })
      let opts = getData(this.chartDataId)
      let genre = (opts.genre || 'genre')
      let sold = (opts.sold || 'sold')
      chart.source(opts.data)
      chart.interval().position(genre + '*' + sold).color(genre);
      chart.render()
    }
  }

  beforeCreate() {
  }

  created() {
     (this.size.height.indexOf('cpx') < 0  && this.size.height.indexOf('rpx') < 0 ) && this.size.height.indexOf('px') > -1 &&  (this.size.height = cml.px2cpx(parseFloat(this.size.height)) + 'cpx')
     (this.size.width.indexOf('cpx') < 0 && this.size.width.indexOf('rpx') < 0) && this.size.width.indexOf('px') > -1 &&  (this.size.width = cml.px2cpx(parseFloat(this.size.width)) + 'cpx')
  }

  beforeMount() {
  }

  mounted() {
    this.initChart()
    this.$cmlEmit('onshow',{
      value: this.name
    })
  }

  beforeDestroy() {
  }

  destroyed() {
  }
}

export default new ChartF2();
</script>

<style >
.lsiten-echart,
.container{
  width: 100%;
}
</style>

<script cml-type="json">
{
  "base": {
    "usingComponents": {
      "f2canvas": "./f2-canvas/f2-canvas"
    }
  },
  "wx": {
    "window": {
      "backgroundTextStyle": "dark",
      "navigationBarBackgroundColor": "#343434",
      "navigationBarTitleText": "CNODE",
      "navigationBarTextStyle": "#fff"
    }
  }
}
</script>